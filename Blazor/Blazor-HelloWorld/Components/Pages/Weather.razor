@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<input class="form-control" @oninput="@Input" />

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <p>Number of warm days: @WarmDaysCount</p>

    <button class="btn btn-primary" @onclick="WarmDaysFilter">Not Warm Days Filtr</button>
    <button class="btn btn-primary" @onclick="RestoreForecasts">Restore</button>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? OriginalForcasts;
    private int WarmDaysCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        OriginalForcasts = forecasts;

        foreach (var dayTemp in forecasts)
        {
            if (dayTemp.TemperatureC > 15)
            {
                WarmDaysCount++;
            }
        }
    }

    private void WarmDaysFilter()
    {
        if (forecasts is not null)
        {
            forecasts = forecasts.Where(forecast => forecast.TemperatureC < 15).ToArray();
        }
    }

    private void RestoreForecasts()
    {
        if (OriginalForcasts is not null)
        {
            forecasts = OriginalForcasts;
        }
    }

    private void Input(ChangeEventArgs args)
    {
        if (OriginalForcasts is not null && args.Value is not null)
        { 
            forecasts = OriginalForcasts.Where(forecast => forecast.Summary.Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToArray();
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
