@page "/games/details"
@inject Blazor.EntityFramework.Data.ApplicationDbContext DB
@using Blazor.EntityFramework.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Game</h4>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@game.Name</dd>
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@game.Genre</dd>
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@game.ReleaseDate</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@game.Description</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@game.Rate</dd>
            <dt class="col-sm2">Url</dt>
            <dd>
                @if (game.Url is not null)
			    {
                    <img src="@game.Url" width="500" height="600" />
			    }
			    else
			    {
				    <p>No image</p>
			    }
            </dd>
        </dl>

        <input @bind="inputRating" type="number" min="1" max="10" />
        <button class="btn btn-primary" @onclick="()=>IncrementRating(inputRating)">Submit</button>

        <div>
            <a href="@($"/games/edit?id={game.Id}")">Edit</a> |
            <a href="@($"/games")">Back to List</a>
        </div>
    }
</div>

@code {
    Game? game;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    private int RatingCounter = 1;
    int inputRating;

    protected override async Task OnInitializedAsync()
    {
        game = await DB.Games.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public void IncrementRating(int rating)
    {
        if (game is not null)
        {
            RatingCounter++;
            game.Rate = (game.Rate * (RatingCounter - 1) + rating) / RatingCounter;
        }
	}
}
