import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class KnapsackGui extends JFrame {
    private JTextField numberOfItemsField;
    private JTextField seedField;
    private JTextField capacityField;
    private JTextArea itemsArea;
    private JTextArea resultArea;
    private JButton solveButton;

    public KnapsackGui() {
        numberOfItemsField = new JTextField(10);
        seedField = new JTextField(10);
        capacityField = new JTextField(10);
        solveButton = new JButton("Solve");

        itemsArea = new JTextArea(10, 20);
        itemsArea.setEditable(false);
        resultArea = new JTextArea(10, 20);
        resultArea.setEditable(false);

        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

        JPanel numberOfItemsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        numberOfItemsPanel.add(new JLabel("Number of items:"));
        numberOfItemsPanel.add(numberOfItemsField);
        add(numberOfItemsPanel);

        JPanel seedPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        seedPanel.add(new JLabel("Seed:"));
        seedPanel.add(seedField);
        add(seedPanel);

        JPanel capacityPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        capacityPanel.add(new JLabel("Capacity:"));
        capacityPanel.add(capacityField);
        add(capacityPanel);

        add(solveButton);

        add(Box.createVerticalStrut(30));

        add(new JLabel("Items:"));
        add(new JScrollPane(itemsArea));
        add(new JLabel("Result:"));
        add(new JScrollPane(resultArea));

        solveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (numberOfItemsField.getText().isEmpty() || seedField.getText().isEmpty() || capacityField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "All fields must be filled", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int numberOfItems = Integer.parseInt(numberOfItemsField.getText());
                int seed = Integer.parseInt(seedField.getText());
                int capacity = Integer.parseInt(capacityField.getText());

                Problem problem = new Problem(numberOfItems, seed);

                StringBuilder itemsText = new StringBuilder();
                for (Item item : problem.items) {
                    itemsText.append(item.toString()).append("\n");
                }
                itemsArea.setText(itemsText.toString());

                Result result = problem.Solve(capacity);
                resultArea.setText(result.toString());
            }
        });

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 575);
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
    }
}
